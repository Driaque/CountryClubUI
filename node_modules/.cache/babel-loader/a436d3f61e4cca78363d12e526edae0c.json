{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\danon\\\\Source\\\\Repos\\\\React_sandbox\\\\club\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\danon\\\\Source\\\\Repos\\\\React_sandbox\\\\club\\\\src\\\\AddInterest.js\";\nimport React, { Component } from 'react';\nconst inputParsers = {\n  date(input) {\n    const _input$split = input.split('/'),\n          _input$split2 = _slicedToArray(_input$split, 3),\n          month = _input$split2[0],\n          day = _input$split2[1],\n          year = _input$split2[2];\n\n    return \"\".concat(year, \"-\").concat(month, \"-\").concat(day);\n  },\n\n  uppercase(input) {\n    return input.toUpperCase();\n  },\n\n  number(input) {\n    return parseFloat(input);\n  }\n\n};\nexport default class AddInterest extends Component {\n  constructor() {\n    super();\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    const form = event.target;\n    const data = new FormData(form);\n\n    for (let name of data.keys()) {\n      const input = form.elements[name];\n      const parserName = input.dataset.parse;\n\n      if (parserName) {\n        const parser = inputParsers[parserName];\n        const parsedValue = parser(data.get(name));\n        data.set(name, parsedValue);\n      }\n    } // fetch('http://localhost:46204/odata/Interests', {\n    //   method: 'POST',\n    //   headers: {\n    //       'Content-Type': 'application/json', \n    //       'Origin' :'http://localhost:46204', \n    //       'Access-Control-Request-Method': 'POST',\n    //   'Access-Control-Request-Headers': 'Content-Type',\n    //   'Access-Control-Allow-Origin': '*'\n    // },\n    //   body: data,\n    // });\n    //Option 2\n    // var request = new XMLHttpRequest();\n    // request.open('POST', 'http://localhost:46204/odata/Interests', true);\n    // request.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');\n    // request.send(data);\n    //OPTION 3\n    // Example POST method implementation:\n\n\n    console;\n    postData('http://localhost:46204/odata/Interests', data).then(data => console.log(JSON.stringify(data))) // JSON-string from `response.json()` call\n    .catch(error => console.error(error));\n\n    function postData(url = '', data = {}) {\n      // Default options are marked with *\n      return fetch(url, {\n        method: 'POST',\n        // *GET, POST, PUT, DELETE, etc.\n        mode: 'cors',\n        // *same-origin',\n        cache: 'no-cache',\n        // *default, no-cache, reload, force-cache, only-if-cached\n        credentials: 'same-origin',\n        // include, *same-origin, omit\n        headers: {\n          'Content-Type': 'application/json' //'Access-Control-Allow-Origin':'*',\n          // 'Content-Type': 'application/x-www-form-urlencoded',\n\n        },\n        redirect: 'follow',\n        // manual, *follow, error\n        referrer: 'no-referrer',\n        // no-referrer, *client\n        body: JSON.stringify(data) // body data type must match \"Content-Type\" header\n\n      }).then(response => response.json()); // parses JSON response into native JavaScript objects \n    } //Option 4 \n\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }), React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      name: \"Topic\",\n      type: \"text\",\n      \"data-parse\": \"uppercase\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, \"Add Topic\")));\n  }\n\n}","map":{"version":3,"sources":["C:\\Users\\danon\\Source\\Repos\\React_sandbox\\club\\src\\AddInterest.js"],"names":["React","Component","inputParsers","date","input","split","month","day","year","uppercase","toUpperCase","number","parseFloat","AddInterest","constructor","handleSubmit","bind","event","preventDefault","form","target","data","FormData","name","keys","elements","parserName","dataset","parse","parser","parsedValue","get","set","console","postData","then","log","JSON","stringify","catch","error","url","fetch","method","mode","cache","credentials","headers","redirect","referrer","body","response","json","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\n\r\nconst inputParsers = {\r\n    date(input) {\r\n      const [month, day, year] = input.split('/');\r\n      return `${year}-${month}-${day}`;\r\n    },\r\n    uppercase(input) {\r\n      return input.toUpperCase();\r\n    },\r\n    number(input) {\r\n      return parseFloat(input);\r\n    },\r\n  };\r\n\r\nexport default class AddInterest extends Component {\r\n    constructor() {\r\n        super();\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n      }\r\n    \r\n      handleSubmit(event) {\r\n        event.preventDefault();\r\n        const form = event.target;\r\n        const data = new FormData(form);\r\n    \r\n        for (let name of data.keys()) {\r\n          const input = form.elements[name];\r\n          const parserName = input.dataset.parse;\r\n    \r\n          if (parserName) {\r\n            const parser = inputParsers[parserName];\r\n            const parsedValue = parser(data.get(name));\r\n            data.set(name, parsedValue);\r\n          }\r\n        }\r\n        \r\n        // fetch('http://localhost:46204/odata/Interests', {\r\n        //   method: 'POST',\r\n        //   headers: {\r\n        //       'Content-Type': 'application/json', \r\n        //       'Origin' :'http://localhost:46204', \r\n        //       'Access-Control-Request-Method': 'POST',\r\n        //   'Access-Control-Request-Headers': 'Content-Type',\r\n        //   'Access-Control-Allow-Origin': '*'\r\n        // },\r\n        //   body: data,\r\n        // });\r\n        \r\n        //Option 2\r\n        // var request = new XMLHttpRequest();\r\n        // request.open('POST', 'http://localhost:46204/odata/Interests', true);\r\n        // request.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');\r\n        // request.send(data);\r\n            \r\n        //OPTION 3\r\n            // Example POST method implementation:\r\n            console\r\n            postData('http://localhost:46204/odata/Interests', data)\r\n            .then(data => console.log(JSON.stringify(data))) // JSON-string from `response.json()` call\r\n            .catch(error => console.error(error));\r\n\r\n            function postData(url = '', data = {}) {\r\n            // Default options are marked with *\r\n            return fetch(url, {\r\n                method: 'POST', // *GET, POST, PUT, DELETE, etc.\r\n                mode: 'cors',// *same-origin',\r\n                cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\r\n                credentials: 'same-origin', // include, *same-origin, omit\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    //'Access-Control-Allow-Origin':'*',\r\n                    // 'Content-Type': 'application/x-www-form-urlencoded',\r\n                },\r\n                redirect: 'follow', // manual, *follow, error\r\n                referrer: 'no-referrer', // no-referrer, *client\r\n                body: JSON.stringify(data), // body data type must match \"Content-Type\" header\r\n            })\r\n            .then(response => response.json()); // parses JSON response into native JavaScript objects \r\n            }\r\n\r\n            //Option 4 \r\n         \r\n      }\r\n\r\n    render() {\r\n        return (\r\n            \r\n            <div>\r\n                <br />\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <input name=\"Topic\" type=\"text\" data-parse=\"uppercase\" />\r\n                    <button>Add Topic</button>\r\n            </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}