{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\danon\\\\Source\\\\Repos\\\\React_sandbox\\\\club\\\\src\\\\InterestList.js\";\nimport React, { Component } from 'react';\n\nconst Interest = ({\n  body\n}) => {\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 5\n    },\n    __self: this\n  }, body.map(interest => {\n    const Interest_ID = interest.Interest_ID,\n          Topic = interest.Topic;\n    return React.createElement(\"div\", {\n      key: Interest_ID,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 9\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 10\n      },\n      __self: this\n    }, Topic), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11\n      },\n      __self: this\n    }));\n  }));\n};\n\nexport default class InterestList extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isLoading: true,\n      interests: [],\n      error: null\n    };\n  }\n\n  fetchInterests() {\n    // The API where we're fetching data from\n    fetch(\"http://localhost:46204/odata/Interests\") // We get a response and receive the data in JSON format...\n    .then(response => response.json()) // ...then we update the state of our application\n    .then(data => this.setState({\n      interests: data,\n      isLoading: false\n    }, console.log(data))) // If we catch errors instead of a response, let's update the app\n    .catch(error => this.setState({\n      error,\n      isLoading: false\n    }));\n  }\n\n  componentDidMount() {\n    this.fetchInterests();\n  }\n\n  render() {\n    const _this$state = this.state,\n          isLoading = _this$state.isLoading,\n          interests = _this$state.interests,\n          error = _this$state.error;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, \"React Fetch - Blog\"), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }), !isLoading ? Object.keys(interests.value).map(key => React.createElement(Interest, {\n      key: key,\n      body: interests.value[key],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    })) : React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, \"Loading...\"));\n  }\n\n}","map":{"version":3,"sources":["C:\\Users\\danon\\Source\\Repos\\React_sandbox\\club\\src\\InterestList.js"],"names":["React","Component","Interest","body","map","interest","Interest_ID","Topic","InterestList","state","isLoading","interests","error","fetchInterests","fetch","then","response","json","data","setState","console","log","catch","componentDidMount","render","Object","keys","value","key"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AAC7B,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,IAAI,CAACC,GAAL,CAASC,QAAQ,IAAI;AAAA,UACZC,WADY,GACWD,QADX,CACZC,WADY;AAAA,UACCC,KADD,GACWF,QADX,CACCE,KADD;AAEpB,WACE;AAAK,MAAA,GAAG,EAAED,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKC,KAAL,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADF;AAMD,GARA,CADH,CADF;AAaD,CAdD;;AAgBA,eAAe,MAAMC,YAAN,SAA2BP,SAA3B,CAAqC;AAAA;AAAA;AAAA,SAEjDQ,KAFiD,GAEzC;AACPC,MAAAA,SAAS,EAAE,IADJ;AAEPC,MAAAA,SAAS,EAAE,EAFJ;AAGPC,MAAAA,KAAK,EAAE;AAHA,KAFyC;AAAA;;AAOhDC,EAAAA,cAAc,GAAG;AACf;AACAC,IAAAA,KAAK,0CAAL,CACE;AADF,KAEGC,IAFH,CAEQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAFpB,EAGE;AAHF,KAIGF,IAJH,CAKIG,IAAI,IACF,KAAKC,QAAL,CAAc;AACZR,MAAAA,SAAS,EAAEO,IADC;AAEZR,MAAAA,SAAS,EAAE;AAFC,KAAd,EAGGU,OAAO,CAACC,GAAR,CAAYH,IAAZ,CAHH,CANN,EAYE;AAZF,KAaGI,KAbH,CAaSV,KAAK,IAAI,KAAKO,QAAL,CAAc;AAAEP,MAAAA,KAAF;AAASF,MAAAA,SAAS,EAAE;AAApB,KAAd,CAblB;AAcD;;AAEDa,EAAAA,iBAAiB,GAAG;AAClB,SAAKV,cAAL;AACD;;AACCW,EAAAA,MAAM,GAAG;AAAA,wBACiC,KAAKf,KADtC;AAAA,UACCC,SADD,eACCA,SADD;AAAA,UACYC,SADZ,eACYA,SADZ;AAAA,UACuBC,KADvB,eACuBA,KADvB;AAEL,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BADL,EAEK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFL,EAIM,CAACF,SAAD,GACAe,MAAM,CAACC,IAAP,CAAYf,SAAS,CAACgB,KAAtB,EAA6BvB,GAA7B,CAAiCwB,GAAG,IAAI,oBAAC,QAAD;AAAU,MAAA,GAAG,EAAEA,GAAf;AAAoB,MAAA,IAAI,EAAEjB,SAAS,CAACgB,KAAV,CAAgBC,GAAhB,CAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAxC,CADA,GAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBANR,CADF;AAWP;;AAzCiD","sourcesContent":["import React, { Component } from 'react'\r\n\r\nconst Interest = ({ body }) => {\r\n  return (\r\n    <div>\r\n      {body.map(interest => {\r\n        const { Interest_ID, Topic } = interest;\r\n        return (\r\n          <div key={Interest_ID}>\r\n            <h2>{Topic}</h2>\r\n            <hr />\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default class InterestList extends Component { //App\r\n  \r\n   state = {\r\n    isLoading: true,\r\n    interests: [],\r\n    error: null\r\n  }\r\n    fetchInterests() {\r\n      // The API where we're fetching data from\r\n      fetch(`http://localhost:46204/odata/Interests`)\r\n        // We get a response and receive the data in JSON format...\r\n        .then(response => response.json())\r\n        // ...then we update the state of our application\r\n        .then(\r\n          data =>\r\n            this.setState({\r\n              interests: data,\r\n              isLoading: false,\r\n            }, console.log(data))\r\n            \r\n        )\r\n        // If we catch errors instead of a response, let's update the app\r\n        .catch(error => this.setState({ error, isLoading: false }));\r\n    }\r\n  \r\n    componentDidMount() {\r\n      this.fetchInterests();\r\n    }\r\n      render() {\r\n        const { isLoading, interests, error } = this.state;\r\n          return (\r\n            <div>\r\n                 <h1>React Fetch - Blog</h1>\r\n                 <hr />\r\n                  {\r\n                  !isLoading ? \r\n                  Object.keys(interests.value).map(key => <Interest key={key} body={interests.value[key]} />) \r\n                  : <h3>Loading...</h3>\r\n                  }\r\n            </div>\r\n          )\r\n  }\r\n}\r\n\r\n\r\n\r\n \r\n  \r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}