{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\danon\\\\Source\\\\Repos\\\\React_sandbox\\\\club\\\\src\\\\InterestList.js\";\nimport React, { Component } from 'react';\nexport default class InterestList extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isLoading: true,\n      interests: [],\n      error: null\n    };\n  }\n\n  fetchInterests() {\n    // The API where we're fetching data from\n    fetch(\"http://localhost:46204/odata/Interests\") // We get a response and receive the data in JSON format...\n    .then(response => response.json()) // ...then we update the state of our application\n    .then(data => this.setState({\n      interests: data,\n      isLoading: false //, console.log(data.value)\n\n    })) // If we catch errors instead of a response, let's update the app\n    .catch(error => this.setState({\n      error,\n      isLoading: false\n    }));\n  }\n\n  componentDidMount() {}\n\n  render() {\n    const _this$state = this.state,\n          isLoading = _this$state.isLoading,\n          interests = _this$state.interests,\n          error = _this$state.error;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, \"React Fetch - Blog\"), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }), !isLoading ? Object.keys(interests).map(key => React.createElement(Interest, {\n      key: key,\n      body: interests[key],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    })) : React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, \"Loading...\"));\n  }\n\n}","map":{"version":3,"sources":["C:\\Users\\danon\\Source\\Repos\\React_sandbox\\club\\src\\InterestList.js"],"names":["React","Component","InterestList","state","isLoading","interests","error","fetchInterests","fetch","then","response","json","data","setState","catch","componentDidMount","render","Object","keys","map","key"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,eAAe,MAAMC,YAAN,SAA2BD,SAA3B,CAAqC;AAAA;AAAA;AAAA,SAEjDE,KAFiD,GAEzC;AACPC,MAAAA,SAAS,EAAE,IADJ;AAEPC,MAAAA,SAAS,EAAE,EAFJ;AAGPC,MAAAA,KAAK,EAAE;AAHA,KAFyC;AAAA;;AAOhDC,EAAAA,cAAc,GAAG;AACf;AACAC,IAAAA,KAAK,0CAAL,CACE;AADF,KAEGC,IAFH,CAEQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAFpB,EAGE;AAHF,KAIGF,IAJH,CAKIG,IAAI,IACF,KAAKC,QAAL,CAAc;AACZR,MAAAA,SAAS,EAAEO,IADC;AAEZR,MAAAA,SAAS,EAAE,KAFC,CAId;;AAJc,KAAd,CANN,EAcE;AAdF,KAeGU,KAfH,CAeSR,KAAK,IAAI,KAAKO,QAAL,CAAc;AAAEP,MAAAA,KAAF;AAASF,MAAAA,SAAS,EAAE;AAApB,KAAd,CAflB;AAgBD;;AAEDW,EAAAA,iBAAiB,GAAG,CAEnB;;AACCC,EAAAA,MAAM,GAAG;AAAA,wBACiC,KAAKb,KADtC;AAAA,UACCC,SADD,eACCA,SADD;AAAA,UACYC,SADZ,eACYA,SADZ;AAAA,UACuBC,KADvB,eACuBA,KADvB;AAEL,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BADL,EAEK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFL,EAIM,CAACF,SAAD,GACAa,MAAM,CAACC,IAAP,CAAYb,SAAZ,EAAuBc,GAAvB,CAA2BC,GAAG,IAAI,oBAAC,QAAD;AAAU,MAAA,GAAG,EAAEA,GAAf;AAAoB,MAAA,IAAI,EAAEf,SAAS,CAACe,GAAD,CAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAlC,CADA,GAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBANR,CADF;AAWP;;AA3CiD","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport default class InterestList extends Component { //App\r\n  \r\n   state = {\r\n    isLoading: true,\r\n    interests: [],\r\n    error: null\r\n  }\r\n    fetchInterests() {\r\n      // The API where we're fetching data from\r\n      fetch(`http://localhost:46204/odata/Interests`)\r\n        // We get a response and receive the data in JSON format...\r\n        .then(response => response.json())\r\n        // ...then we update the state of our application\r\n        .then(\r\n          data =>\r\n            this.setState({\r\n              interests: data,\r\n              isLoading: false,\r\n            }\r\n            //, console.log(data.value)\r\n            )\r\n            \r\n        )\r\n        // If we catch errors instead of a response, let's update the app\r\n        .catch(error => this.setState({ error, isLoading: false }));\r\n    }\r\n  \r\n    componentDidMount() {\r\n      \r\n    }\r\n      render() {\r\n        const { isLoading, interests, error } = this.state;\r\n          return (\r\n            <div>\r\n                 <h1>React Fetch - Blog</h1>\r\n                 <hr />\r\n                  {\r\n                  !isLoading ? \r\n                  Object.keys(interests).map(key => <Interest key={key} body={interests[key]} />) \r\n                  : <h3>Loading...</h3>\r\n                  }\r\n            </div>\r\n          )\r\n  }\r\n}\r\n\r\n\r\n\r\n \r\n  \r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}